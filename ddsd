[1mdiff --git a/Pet_finderDB.db b/Pet_finderDB.db[m
[1mindex 7729f75..2e04532 100644[m
Binary files a/Pet_finderDB.db and b/Pet_finderDB.db differ
[1mdiff --git a/alembic/versions/6e210a22706d_added_new_features_in_animal_model_.py b/alembic/versions/6e210a22706d_added_new_features_in_animal_model_.py[m
[1mnew file mode 100644[m
[1mindex 0000000..636a9a2[m
[1m--- /dev/null[m
[1m+++ b/alembic/versions/6e210a22706d_added_new_features_in_animal_model_.py[m
[36m@@ -0,0 +1,51 @@[m
[32m+[m[32m"""Added new features in Animal model: animal_name, animal_gender, animal_age, animal_size, animal_coatLength, animal_color[m
[32m+[m
[32m+[m[32mRevision ID: 6e210a22706d[m
[32m+[m[32mRevises: 6eb5ea5b058d[m
[32m+[m[32mCreate Date: 2024-07-26 17:04:02.823723[m
[32m+[m
[32m+[m[32m"""[m
[32m+[m[32mfrom typing import Sequence, Union[m
[32m+[m
[32m+[m[32mfrom alembic import op[m
[32m+[m[32mimport sqlalchemy as sa[m
[32m+[m
[32m+[m
[32m+[m[32m# revision identifiers, used by Alembic.[m
[32m+[m[32mrevision: str = '6e210a22706d'[m
[32m+[m[32mdown_revision: Union[str, None] = '6eb5ea5b058d'[m
[32m+[m[32mbranch_labels: Union[str, Sequence[str], None] = None[m
[32m+[m[32mdepends_on: Union[str, Sequence[str], None] = None[m
[32m+[m
[32m+[m
[32m+[m[32mdef upgrade() -> None:[m
[32m+[m[32m    # ### commands auto generated by Alembic - please adjust! ###[m
[32m+[m[32m    op.create_table('post_types',[m
[32m+[m[32m    sa.Column('post_type_id', sa.Integer(), nullable=False),[m
[32m+[m[32m    sa.Column('post_type_name', sa.String(), nullable=True),[m
[32m+[m[32m    sa.PrimaryKeyConstraint('post_type_id'),[m
[32m+[m[32m    sa.UniqueConstraint('post_type_name')[m
[32m+[m[32m    )[m
[32m+[m[32m    op.add_column('animals', sa.Column('animal_name', sa.String(), nullable=True))[m
[32m+[m[32m    op.add_column('animals', sa.Column('animal_gender', sa.String(), nullable=True))[m
[32m+[m[32m    op.add_column('animals', sa.Column('animal_age', sa.Integer(), nullable=True))[m
[32m+[m[32m    op.add_column('animals', sa.Column('animal_size', sa.String(), nullable=True))[m
[32m+[m[32m    op.add_column('animals', sa.Column('animal_coatLength', sa.String(), nullable=True))[m
[32m+[m[32m    op.add_column('animals', sa.Column('animal_color', sa.String(), nullable=True))[m
[32m+[m[32m    op.add_column('posts', sa.Column('post_type_id', sa.Integer(), nullable=False))[m
[32m+[m[32m    op.create_foreign_key(None, 'posts', 'post_types', ['post_type_id'], ['post_type_id'])[m
[32m+[m[32m    # ### end Alembic commands ###[m
[32m+[m
[32m+[m
[32m+[m[32mdef downgrade() -> None:[m
[32m+[m[32m    # ### commands auto generated by Alembic - please adjust! ###[m
[32m+[m[32m    op.drop_constraint(None, 'posts', type_='foreignkey')[m
[32m+[m[32m    op.drop_column('posts', 'post_type_id')[m
[32m+[m[32m    op.drop_column('animals', 'animal_color')[m
[32m+[m[32m    op.drop_column('animals', 'animal_coatLength')[m
[32m+[m[32m    op.drop_column('animals', 'animal_size')[m
[32m+[m[32m    op.drop_column('animals', 'animal_age')[m
[32m+[m[32m    op.drop_column('animals', 'animal_gender')[m
[32m+[m[32m    op.drop_column('animals', 'animal_name')[m
[32m+[m[32m    op.drop_table('post_types')[m
[32m+[m[32m    # ### end Alembic commands ###[m
[1mdiff --git a/app/database/models.py b/app/database/models.py[m
[1mindex d5a37fd..a2ba55a 100644[m
[1m--- a/app/database/models.py[m
[1m+++ b/app/database/models.py[m
[36m@@ -1,4 +1,5 @@[m
[31m-from app.database.db import Base[m
[32m+[m
[32m+[m[32mfrom ..database.db import Base[m
 from sqlalchemy import Column, Integer, String, ForeignKey, Date, Float, Boolean, LargeBinary[m
 from sqlalchemy.orm import relationship[m
 import re[m
[36m@@ -25,6 +26,12 @@[m [mclass Animal(Base):[m
     animal_id = Column(Integer, primary_key=True)[m
     animal_type = Column(String, ForeignKey("animal_types.animal_type_id"))[m
     animal_breed = Column(String)[m
[32m+[m[32m    animal_name = Column(String)[m
[32m+[m[32m    animal_gender = Column(String)[m
[32m+[m[32m    animal_age = Column(Integer)[m
[32m+[m[32m    animal_size = Column(String)[m
[32m+[m[32m    animal_coatLength = Column(String)[m
[32m+[m[32m    animal_color = Column(String)[m
     medical_card = Column(String)[m
     location = Column(Integer, ForeignKey("locations.location_id"))[m
 [m
[36m@@ -48,6 +55,12 @@[m [mclass Request(Base):[m
     post_id = Column(Integer, ForeignKey("posts.post_id"))[m
     content = Column(String)[m
 [m
[32m+[m[32mclass PostType(Base):[m
[32m+[m[32m    __tablename__ = "post_types"[m
[32m+[m
[32m+[m[32m    post_type_id = Column(Integer, primary_key=True)[m
[32m+[m[32m    post_type_name = Column(String, unique=True)[m
[32m+[m
 class Post(Base):[m
     __tablename__ = "posts"[m
 [m
[36m@@ -60,3 +73,10 @@[m [mclass Post(Base):[m
     image = Column(LargeBinary)[m
     created_at = Column(Date)[m
     request_id = Column(Integer, ForeignKey("requests.request_id"))[m
[32m+[m[32m    post_type_id = Column(Integer, ForeignKey("post_types.post_type_id"), nullable=False)[m
[32m+[m
[32m+[m[32m    user = relationship("User", back_populates="posts")[m
[32m+[m[32m    animal = relationship("Animal")[m
[32m+[m[32m    post_type = relationship("PostType")[m
[32m+[m
[32m+[m[32mUser.posts = relationship("Post", order_by=Post.post_id, back_populates="user")[m
\ No newline at end of file[m
[1mdiff --git a/app/main.py b/app/main.py[m
[1mindex b7a2627..c97637e 100644[m
[1m--- a/app/main.py[m
[1m+++ b/app/main.py[m
[36m@@ -1,5 +1,5 @@[m
[31m-from .Routers import user[m
[31m-from app.database.db import Base, engine[m
[32m+[m[32mfrom .Routers import user, animal[m
[32m+[m[32mfrom .database.db import Base, engine[m
 from fastapi import FastAPI[m
 from .database import models[m
 #Imports for jinja2 templates[m
[36m@@ -20,4 +20,5 @@[m [masync def read_root(request: Request):[m
 # Mount static files if you have any[m
 app.mount("/app/static", StaticFiles(directory="app/static"), name="static")[m
 [m
[31m-app.include_router(user.router)[m
\ No newline at end of file[m
[32m+[m[32mapp.include_router(user.router)[m
[32m+[m[32mapp.include_router(animal.router)[m
\ No newline at end of file[m
[1mdiff --git a/app/schemas/schemas.py b/app/schemas/schemas.py[m
[1mindex c06b274..08b2543 100644[m
[1m--- a/app/schemas/schemas.py[m
[1m+++ b/app/schemas/schemas.py[m
[36m@@ -1,27 +1,42 @@[m
 from pydantic import BaseModel[m
 from datetime import datetime[m
[31m-from typing import Optional[m
[32m+[m[32mfrom typing import Optional, List[m
 [m
 [m
[31m-#User[m
[32m+[m[32m# Existing Schemas[m
[32m+[m
[32m+[m[32m# User Schemas[m
 class UserBase(BaseModel):[m
     username: str[m
     email: str[m
     is_admin: bool[m
     [m
[31m-    [m
 class UserCreate(UserBase):[m
     password: str[m
[31m-    [m
[31m-class User(UserBase):[m
[32m+[m
[32m+[m[32mclass UserResponse(UserBase):[m
[32m+[m[32m    user_id: int[m
[32m+[m[32m    username: str[m
[32m+[m[32m    email: str[m
[32m+[m[32m    is_admin: bool[m
 [m
     class Config:[m
         orm_mode = True[m
 [m
[31m-#Animal[m
[32m+[m[32mclass User(UserBase):[m
[32m+[m[32m    class Config:[m
[32m+[m[32m        orm_mode = True[m
[32m+[m
[32m+[m[32m# Animal Schemas[m
 class AnimalBase(BaseModel):[m
     animal_type: str[m
     animal_breed: str[m
[32m+[m[32m    animal_name: str[m
[32m+[m[32m    animal_gender: str[m
[32m+[m[32m    animal_age: int[m
[32m+[m[32m    animal_size: str[m
[32m+[m[32m    animal_coatLength: str[m
[32m+[m[32m    animal_color: str[m
     medical_card: str[m
     location: int[m
 [m
[36m@@ -29,12 +44,15 @@[m [mclass AnimalCreate(AnimalBase):[m
     pass [m
 [m
 class Animal(AnimalBase):[m
[31m-[m
     class Config:[m
         orm_mode = True[m
 [m
[32m+[m[32mclass AnimalResponse(AnimalBase):[m
[32m+[m[32m    animal_id: int[m
[32m+[m[32m    class Config:[m
[32m+[m[32m        orm_mode = True[m
 [m
[31m-#Location[m
[32m+[m[32m# Location Schemas[m
 class LocationBase(BaseModel):[m
     city_name: str[m
 [m
[36m@@ -45,8 +63,7 @@[m [mclass Location(LocationBase):[m
     class Config:[m
         orm_mode = True[m
 [m
[31m-[m
[31m-#Animal_type[m
[32m+[m[32m# AnimalType Schemas[m
 class AnimalTypeBase(BaseModel):[m
     animal_type: str[m
 [m
[36m@@ -57,29 +74,36 @@[m [mclass AnimalType(AnimalTypeBase):[m
     class Config:[m
         orm_mode = True[m
 [m
[32m+[m[32m# PostType Schemas[m
[32m+[m[32mclass PostTypeBase(BaseModel):[m
[32m+[m[32m    post_type_name: str[m
 [m
[31m-#Request[m
[31m-class RequestBase(BaseModel):[m
[31m-    user_id: int[m
[31m-    post_id: int[m
[31m-    content: str[m
[31m-[m
[31m-class RequestCreate(RequestBase):[m
[32m+[m[32mclass PostTypeCreate(PostTypeBase):[m
     pass [m
 [m
[31m-class Request(RequestBase):[m
[32m+[m[32mclass PostType(PostTypeBase):[m
[32m+[m[32m    post_type_id: int[m
[32m+[m
     class Config:[m
         orm_mode = True[m
 [m
[32m+[m[32m# PostTypeResponse Schema[m
[32m+[m[32mclass PostTypeResponse(BaseModel):[m
[32m+[m[32m    post_type_id: int[m
[32m+[m[32m    post_type_name: str[m
 [m
[31m-#Post[m
[32m+[m[32m    class Config:[m
[32m+[m[32m        orm_mode = True[m
[32m+[m
[32m+[m[32m# Post Schemas[m
 class PostBase(BaseModel):[m
     user_id: int[m
     animal_id: int[m
     title: str[m
     abstract: str[m
     content: str[m
[31m-    image: bytes[m
[32m+[m[32m    image: Optional[bytes][m
[32m+[m[32m    post_type_id: int[m
 [m
 class CreatePost(PostBase):[m
     pass [m
[36m@@ -90,11 +114,44 @@[m [mclass Post(PostBase):[m
     class Config:[m
         orm_mode = True[m
 [m
[32m+[m[32m# PostResponse Schema[m
[32m+[m[32mclass PostResponse(BaseModel):[m
[32m+[m[32m    post_id: int[m
[32m+[m[32m    user_id: int[m
[32m+[m[32m    animal_id: int[m
[32m+[m[32m    title: str[m
[32m+[m[32m    abstract: str[m
[32m+[m[32m    content: str[m
[32m+[m[32m    image: Optional[bytes][m
[32m+[m[32m    post_type: PostTypeResponse  # Including the post type details[m
[32m+[m[32m    created_at: datetime[m
[32m+[m
[32m+[m[32m    class Config:[m
[32m+[m[32m        orm_mode = True[m
[32m+[m
[32m+[m[32m# Request Schemas[m
[32m+[m[32mclass RequestBase(BaseModel):[m
[32m+[m[32m    user_id: int[m
[32m+[m[32m    post_id: int[m
[32m+[m[32m    content: str[m
[32m+[m
[32m+[m[32mclass RequestCreate(RequestBase):[m
[32m+[m[32m    pass[m
[32m+[m
[32m+[m[32mclass RequestResponse(RequestBase):[m
[32m+[m[32m    request_id: int[m
[32m+[m[32m    user: UserResponse[m
[32m+[m[32m    post: PostResponse[m
[32m+[m[32m    content: str[m
[32m+[m
[32m+[m[32mclass Request(RequestBase):[m
[32m+[m[32m    class Config:[m
[32m+[m[32m        orm_mode = True[m
 [m
[31m-#Token[m
[32m+[m[32m# Token Schemas[m
 class Token(BaseModel):[m
     access_token: str[m
     token_type: str[m
 [m
 class TokenData(BaseModel):[m
[31m-    username: Optional[str] = None[m
[32m+[m[32m    username: Optional[str] = None[m
\ No newline at end of file[m
[1mdiff --git a/requirements.txt b/requirements.txt[m
[1mindex 460a889..12f0f8c 100644[m
[1m--- a/requirements.txt[m
[1m+++ b/requirements.txt[m
[36m@@ -4,4 +4,5 @@[m [mpasslib[m
 bcrypt[m
 alembic[m
 jinja2[m
[31m-pyjwt[m
\ No newline at end of file[m
[32m+[m[32mpyjwt[m
[32m+[m[32mpython-jose[m
